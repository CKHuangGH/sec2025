#!/bin/bash
# Updated auto_ntp_setup.sh (for ntpsec + Debian)

set -euo pipefail  # Exit on error, unset variable, or pipe failure

NODE_LIST="./node_list_all"
TIMESTAMP=$(date +%Y%m%d%H%M%S)
NTP_CONF="/etc/ntpsec/ntp.conf"
SERVICE="ntp"
SYNC_CMD="ntpd -gq"

# Check if node list file exists
if [[ ! -f "$NODE_LIST" ]]; then
  echo "Error: $NODE_LIST not found" >&2
  exit 1
fi

# Get Management IP (first line of node list)
MGMT_IP=$(head -n 1 "$NODE_LIST" | awk '{print $1}')
if [[ -z "$MGMT_IP" ]]; then
  echo "Error: First line of node_list is empty" >&2
  exit 1
fi
echo "Management IP: $MGMT_IP"

# Get local machine IP
LOCAL_IP=$(hostname -I | awk '{print $1}')
if [[ -z "$LOCAL_IP" ]]; then
  echo "Error: Failed to get local IP" >&2
  exit 1
fi
echo "Local IP: $LOCAL_IP"

# Create config directory if it doesn't exist
if [[ ! -d $(dirname "$NTP_CONF") ]]; then
  mkdir -p "$(dirname "$NTP_CONF")"
fi

# Backup existing config file if present
if [[ -f "$NTP_CONF" ]]; then
  cp -p "$NTP_CONF" "${NTP_CONF}.orig-${TIMESTAMP}"
  echo "Backup: ${NTP_CONF} → ${NTP_CONF}.orig-${TIMESTAMP}"
else
  echo "Notice: $NTP_CONF does not exist; creating new config"
  touch "$NTP_CONF"
fi

# Generate config depending on whether this node is the Management node
if [[ "$LOCAL_IP" == "$MGMT_IP" ]]; then
  echo "Configuring as NTP Server"
  cat > "$NTP_CONF" <<EOF
# /etc/ntpsec/ntp.conf - Auto-generated by auto_ntp_setup.sh
driftfile /var/lib/ntpsec/ntp.drift
pool 0.pool.ntp.org iburst
pool 1.pool.ntp.org iburst
pool 2.pool.ntp.org iburst
pool 3.pool.ntp.org iburst

restrict default kod nomodify notrap nopeer noquery
restrict 127.0.0.1
restrict ::1
restrict 192.168.0.0 mask 255.255.0.0 nomodify notrap
EOF
else
  echo "Configuring as NTP Client → pointing to $MGMT_IP"
  cat > "$NTP_CONF" <<EOF
# /etc/ntpsec/ntp.conf - Auto-generated by auto_ntp_setup.sh
driftfile /var/lib/ntpsec/ntp.drift
server $MGMT_IP iburst

restrict default nomodify notrap nopeer noquery
restrict 127.0.0.1
restrict ::1
EOF
fi

# Stop NTP service (free up port 123)
echo "Stopping NTP service ($SERVICE)..."
systemctl stop "$SERVICE"

# Force one-time sync
echo "Forcing time sync ($SYNC_CMD)..."
$SYNC_CMD || echo "⚠️ Sync might fail temporarily due to firewall or network issues"

# Restart the NTP service
echo "Restarting NTP service..."
systemctl start "$SERVICE"

echo "✅ NTP setup complete!"